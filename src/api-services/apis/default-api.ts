/* tslint:disable */
/* eslint-disable */
/**
 * 学工大系统API
 * 学工大系统 Issues Documentation
 *
 * OpenAPI spec version: v1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { JsonResultListSchoolInfo } from '../models';
import { JsonResultListSchoolPastRankingVo } from '../models';
import { JsonResultPageMajorInfoVo } from '../models';
import { JsonResultPageOverseaStuInfo } from '../models';
import { JsonResultPageSchoolInfo } from '../models';
import { JsonResultUserVo } from '../models';
import { JsonResultVoid } from '../models';
import { MajorInfo } from '../models';
import { MajorInfoCreateFromExcelBody } from '../models';
import { OverseaStuInfo } from '../models';
import { SchoolInfo } from '../models';
import { SchoolPastRankingDto } from '../models';
import { User } from '../models';
/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 精确查询，传递id按id查，传递name按name查
         * @param {number} id 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accurateQuery: async (id: number, name: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling accurateQuery.');
            }
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling accurateQuery.');
            }
            const localVarPath = `/oversea/school_info/accurate_query`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 更改密码
         * @param {string} password 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changePassword: async (password: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'password' is not null or undefined
            if (password === null || password === undefined) {
                throw new RequiredError('password','Required parameter password was null or undefined when calling changePassword.');
            }
            const localVarPath = `/user/update/change_password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (password !== undefined) {
                localVarQueryParameter['password'] = password;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 创建。需要ADMIN角色
         * @param {OverseaStuInfo} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create: async (body: OverseaStuInfo, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling create.');
            }
            const localVarPath = `/oversea/stu/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 创建排名，schoolName和schoolId至少转递一个，系统会自动补全。必须传递年份和排名。需要ADMIN角色
         * @param {SchoolPastRankingDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create1: async (body: SchoolPastRankingDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling create1.');
            }
            const localVarPath = `/oversea/school_past_ranking/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 创建SchoolInfo。需要ADMIN角色
         * @param {SchoolInfo} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create2: async (body: SchoolInfo, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling create2.');
            }
            const localVarPath = `/oversea/school_info/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 创建。需要ADMIN角色
         * @param {MajorInfo} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create4: async (body: MajorInfo, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling create4.');
            }
            const localVarPath = `/oversea/major_info/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 从Excel文件中创建用户，需要ADMIN角色。其中userFile是User类的excel，roleFile是UserRole类的excel，二者缺一不可，且一一对应，否则账户无法正常使用
         * @param {Blob} userFile 
         * @param {Blob} roleFile 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFromExcel: async (userFile: Blob, roleFile: Blob, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userFile' is not null or undefined
            if (userFile === null || userFile === undefined) {
                throw new RequiredError('userFile','Required parameter userFile was null or undefined when calling createFromExcel.');
            }
            // verify required parameter 'roleFile' is not null or undefined
            if (roleFile === null || roleFile === undefined) {
                throw new RequiredError('roleFile','Required parameter roleFile was null or undefined when calling createFromExcel.');
            }
            const localVarPath = `/user/create_from_excel`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (userFile !== undefined) {
                localVarQueryParameter['userFile'] = userFile;
            }

            if (roleFile !== undefined) {
                localVarQueryParameter['roleFile'] = roleFile;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 从excel中创建。需要ADMIN角色
         * @param {Blob} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFromExcel1: async (file: Blob, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'file' is not null or undefined
            if (file === null || file === undefined) {
                throw new RequiredError('file','Required parameter file was null or undefined when calling createFromExcel1.');
            }
            const localVarPath = `/oversea/stu/create_from_excel`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (file !== undefined) {
                localVarQueryParameter['file'] = file;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 从excel创建。需要ADMIN角色
         * @param {Blob} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFromExcel2: async (file: Blob, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'file' is not null or undefined
            if (file === null || file === undefined) {
                throw new RequiredError('file','Required parameter file was null or undefined when calling createFromExcel2.');
            }
            const localVarPath = `/oversea/school_past_ranking/create_from_excel`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (file !== undefined) {
                localVarQueryParameter['file'] = file;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 从excel中创建。需要ADMIN角色
         * @param {Blob} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFromExcel3: async (file: Blob, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'file' is not null or undefined
            if (file === null || file === undefined) {
                throw new RequiredError('file','Required parameter file was null or undefined when calling createFromExcel3.');
            }
            const localVarPath = `/oversea/school_info/create_from_excel`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (file !== undefined) {
                localVarQueryParameter['file'] = file;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 从excel创建。需要ADMIN角色
         * @param {MajorInfoCreateFromExcelBody} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFromExcel5: async (body?: MajorInfoCreateFromExcelBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/oversea/major_info/create_from_excel`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 获取用户详细信息
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        query: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user/query`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 全查，分页；参数仅需考虑pageNum和pageSize
         * @param {string} [id] id
         * @param {string} [uid] 学工号
         * @param {string} [major] 专业
         * @param {string} [hometown] 生源地
         * @param {string} [entranceScore] 高考成绩
         * @param {string} [score] 前六学期成绩
         * @param {string} [ranking] 前六学期排名
         * @param {string} [university] 去向大学
         * @param {string} [ielts] 雅思成绩
         * @param {string} [toefl] 托福成绩
         * @param {string} [gre] GRE成绩
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        query1: async (id?: string, uid?: string, major?: string, hometown?: string, entranceScore?: string, score?: string, ranking?: string, university?: string, ielts?: string, toefl?: string, gre?: string, pageNum?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/oversea/stu/query`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }

            if (uid !== undefined) {
                localVarQueryParameter['uid'] = uid;
            }

            if (major !== undefined) {
                localVarQueryParameter['major'] = major;
            }

            if (hometown !== undefined) {
                localVarQueryParameter['hometown'] = hometown;
            }

            if (entranceScore !== undefined) {
                localVarQueryParameter['entranceScore'] = entranceScore;
            }

            if (score !== undefined) {
                localVarQueryParameter['score'] = score;
            }

            if (ranking !== undefined) {
                localVarQueryParameter['ranking'] = ranking;
            }

            if (university !== undefined) {
                localVarQueryParameter['university'] = university;
            }

            if (ielts !== undefined) {
                localVarQueryParameter['ielts'] = ielts;
            }

            if (toefl !== undefined) {
                localVarQueryParameter['toefl'] = toefl;
            }

            if (gre !== undefined) {
                localVarQueryParameter['gre'] = gre;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * schoolId和schoolName至少选择一个查询
         * @param {number} schoolId 
         * @param {string} schoolName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        query2: async (schoolId: number, schoolName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'schoolId' is not null or undefined
            if (schoolId === null || schoolId === undefined) {
                throw new RequiredError('schoolId','Required parameter schoolId was null or undefined when calling query2.');
            }
            // verify required parameter 'schoolName' is not null or undefined
            if (schoolName === null || schoolName === undefined) {
                throw new RequiredError('schoolName','Required parameter schoolName was null or undefined when calling query2.');
            }
            const localVarPath = `/oversea/school_past_ranking/query`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (schoolId !== undefined) {
                localVarQueryParameter['schoolId'] = schoolId;
            }

            if (schoolName !== undefined) {
                localVarQueryParameter['schoolName'] = schoolName;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 模糊查询，传递name根据name模糊查询，分页；不传递name则为全查，分页。参数仅需考虑name，pageSize，pageNum
         * @param {string} [id] id
         * @param {string} [name] 学校名称
         * @param {string} [rank] 排名
         * @param {string} [icon] 校徽url
         * @param {string} [location] 所在国家
         * @param {string} [introduction] 简介
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        query3: async (id?: string, name?: string, rank?: string, icon?: string, location?: string, introduction?: string, pageNum?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/oversea/school_info/query`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (rank !== undefined) {
                localVarQueryParameter['rank'] = rank;
            }

            if (icon !== undefined) {
                localVarQueryParameter['icon'] = icon;
            }

            if (location !== undefined) {
                localVarQueryParameter['location'] = location;
            }

            if (introduction !== undefined) {
                localVarQueryParameter['introduction'] = introduction;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 根据学校名称查询，分页。参数仅需考虑schoolName，pageNum和pageSize
         * @param {string} [id] id
         * @param {string} [schoolName] 学校名称
         * @param {string} [schoolLink] 学校链接
         * @param {string} [name] 专业名称
         * @param {string} [ranking] 专业排名
         * @param {string} [admissionRequirement] 专业录取要求
         * @param {string} [applicationTime] 专业申请时间
         * @param {string} [courseDetails] 专业课程详情
         * @param {string} [link] 专业官网链接
         * @param {string} [applicationChannel] 专业申请通道
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        query5: async (id?: string, schoolName?: string, schoolLink?: string, name?: string, ranking?: string, admissionRequirement?: string, applicationTime?: string, courseDetails?: string, link?: string, applicationChannel?: string, pageNum?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/oversea/major_info/query`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }

            if (schoolName !== undefined) {
                localVarQueryParameter['schoolName'] = schoolName;
            }

            if (schoolLink !== undefined) {
                localVarQueryParameter['schoolLink'] = schoolLink;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (ranking !== undefined) {
                localVarQueryParameter['ranking'] = ranking;
            }

            if (admissionRequirement !== undefined) {
                localVarQueryParameter['admissionRequirement'] = admissionRequirement;
            }

            if (applicationTime !== undefined) {
                localVarQueryParameter['applicationTime'] = applicationTime;
            }

            if (courseDetails !== undefined) {
                localVarQueryParameter['courseDetails'] = courseDetails;
            }

            if (link !== undefined) {
                localVarQueryParameter['link'] = link;
            }

            if (applicationChannel !== undefined) {
                localVarQueryParameter['applicationChannel'] = applicationChannel;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 用户注册
         * @param {User} body 
         * @param {number} roleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        register: async (body: User, roleId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling register.');
            }
            // verify required parameter 'roleId' is not null or undefined
            if (roleId === null || roleId === undefined) {
                throw new RequiredError('roleId','Required parameter roleId was null or undefined when calling register.');
            }
            const localVarPath = `/user/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (roleId !== undefined) {
                localVarQueryParameter['roleId'] = roleId;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 更新，需要传递uid。需要ADMIN角色
         * @param {OverseaStuInfo} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update: async (body: OverseaStuInfo, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling update.');
            }
            const localVarPath = `/oversea/stu/update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 更新，schoolName和schoolId至少传递一个。需要ADMIN角色
         * @param {SchoolPastRankingDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update1: async (body: SchoolPastRankingDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling update1.');
            }
            const localVarPath = `/oversea/school_past_ranking/update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 根据学校名称进行更新，name不能能为空。需要ADMIN角色
         * @param {SchoolInfo} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update2: async (body: SchoolInfo, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling update2.');
            }
            const localVarPath = `/oversea/school_info/update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 更新，需要传递id。需要ADMIN角色
         * @param {MajorInfo} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update4: async (body: MajorInfo, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling update4.');
            }
            const localVarPath = `/oversea/major_info/update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 精确查询，传递id按id查，传递name按name查
         * @param {number} id 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accurateQuery(id: number, name: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<JsonResultListSchoolInfo>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).accurateQuery(id, name, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 更改密码
         * @param {string} password 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async changePassword(password: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<JsonResultVoid>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).changePassword(password, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 创建。需要ADMIN角色
         * @param {OverseaStuInfo} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async create(body: OverseaStuInfo, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<JsonResultVoid>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).create(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 创建排名，schoolName和schoolId至少转递一个，系统会自动补全。必须传递年份和排名。需要ADMIN角色
         * @param {SchoolPastRankingDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async create1(body: SchoolPastRankingDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<JsonResultVoid>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).create1(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 创建SchoolInfo。需要ADMIN角色
         * @param {SchoolInfo} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async create2(body: SchoolInfo, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<JsonResultVoid>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).create2(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 创建。需要ADMIN角色
         * @param {MajorInfo} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async create4(body: MajorInfo, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<JsonResultVoid>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).create4(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 从Excel文件中创建用户，需要ADMIN角色。其中userFile是User类的excel，roleFile是UserRole类的excel，二者缺一不可，且一一对应，否则账户无法正常使用
         * @param {Blob} userFile 
         * @param {Blob} roleFile 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createFromExcel(userFile: Blob, roleFile: Blob, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<JsonResultVoid>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).createFromExcel(userFile, roleFile, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 从excel中创建。需要ADMIN角色
         * @param {Blob} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createFromExcel1(file: Blob, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<JsonResultVoid>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).createFromExcel1(file, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 从excel创建。需要ADMIN角色
         * @param {Blob} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createFromExcel2(file: Blob, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<JsonResultVoid>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).createFromExcel2(file, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 从excel中创建。需要ADMIN角色
         * @param {Blob} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createFromExcel3(file: Blob, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<JsonResultVoid>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).createFromExcel3(file, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 从excel创建。需要ADMIN角色
         * @param {MajorInfoCreateFromExcelBody} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createFromExcel5(body?: MajorInfoCreateFromExcelBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<JsonResultVoid>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).createFromExcel5(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 获取用户详细信息
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async query(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<JsonResultUserVo>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).query(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 全查，分页；参数仅需考虑pageNum和pageSize
         * @param {string} [id] id
         * @param {string} [uid] 学工号
         * @param {string} [major] 专业
         * @param {string} [hometown] 生源地
         * @param {string} [entranceScore] 高考成绩
         * @param {string} [score] 前六学期成绩
         * @param {string} [ranking] 前六学期排名
         * @param {string} [university] 去向大学
         * @param {string} [ielts] 雅思成绩
         * @param {string} [toefl] 托福成绩
         * @param {string} [gre] GRE成绩
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async query1(id?: string, uid?: string, major?: string, hometown?: string, entranceScore?: string, score?: string, ranking?: string, university?: string, ielts?: string, toefl?: string, gre?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<JsonResultPageOverseaStuInfo>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).query1(id, uid, major, hometown, entranceScore, score, ranking, university, ielts, toefl, gre, pageNum, pageSize, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * schoolId和schoolName至少选择一个查询
         * @param {number} schoolId 
         * @param {string} schoolName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async query2(schoolId: number, schoolName: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<JsonResultListSchoolPastRankingVo>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).query2(schoolId, schoolName, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 模糊查询，传递name根据name模糊查询，分页；不传递name则为全查，分页。参数仅需考虑name，pageSize，pageNum
         * @param {string} [id] id
         * @param {string} [name] 学校名称
         * @param {string} [rank] 排名
         * @param {string} [icon] 校徽url
         * @param {string} [location] 所在国家
         * @param {string} [introduction] 简介
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async query3(id?: string, name?: string, rank?: string, icon?: string, location?: string, introduction?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<JsonResultPageSchoolInfo>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).query3(id, name, rank, icon, location, introduction, pageNum, pageSize, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 根据学校名称查询，分页。参数仅需考虑schoolName，pageNum和pageSize
         * @param {string} [id] id
         * @param {string} [schoolName] 学校名称
         * @param {string} [schoolLink] 学校链接
         * @param {string} [name] 专业名称
         * @param {string} [ranking] 专业排名
         * @param {string} [admissionRequirement] 专业录取要求
         * @param {string} [applicationTime] 专业申请时间
         * @param {string} [courseDetails] 专业课程详情
         * @param {string} [link] 专业官网链接
         * @param {string} [applicationChannel] 专业申请通道
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async query5(id?: string, schoolName?: string, schoolLink?: string, name?: string, ranking?: string, admissionRequirement?: string, applicationTime?: string, courseDetails?: string, link?: string, applicationChannel?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<JsonResultPageMajorInfoVo>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).query5(id, schoolName, schoolLink, name, ranking, admissionRequirement, applicationTime, courseDetails, link, applicationChannel, pageNum, pageSize, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 用户注册
         * @param {User} body 
         * @param {number} roleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async register(body: User, roleId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<JsonResultVoid>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).register(body, roleId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 更新，需要传递uid。需要ADMIN角色
         * @param {OverseaStuInfo} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async update(body: OverseaStuInfo, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<JsonResultVoid>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).update(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 更新，schoolName和schoolId至少传递一个。需要ADMIN角色
         * @param {SchoolPastRankingDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async update1(body: SchoolPastRankingDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<JsonResultVoid>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).update1(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 根据学校名称进行更新，name不能能为空。需要ADMIN角色
         * @param {SchoolInfo} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async update2(body: SchoolInfo, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<JsonResultVoid>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).update2(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 更新，需要传递id。需要ADMIN角色
         * @param {MajorInfo} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async update4(body: MajorInfo, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<JsonResultVoid>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).update4(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 精确查询，传递id按id查，传递name按name查
         * @param {number} id 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accurateQuery(id: number, name: string, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonResultListSchoolInfo>> {
            return DefaultApiFp(configuration).accurateQuery(id, name, options).then((request) => request(axios, basePath));
        },
        /**
         * 更改密码
         * @param {string} password 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async changePassword(password: string, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonResultVoid>> {
            return DefaultApiFp(configuration).changePassword(password, options).then((request) => request(axios, basePath));
        },
        /**
         * 创建。需要ADMIN角色
         * @param {OverseaStuInfo} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async create(body: OverseaStuInfo, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonResultVoid>> {
            return DefaultApiFp(configuration).create(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 创建排名，schoolName和schoolId至少转递一个，系统会自动补全。必须传递年份和排名。需要ADMIN角色
         * @param {SchoolPastRankingDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async create1(body: SchoolPastRankingDto, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonResultVoid>> {
            return DefaultApiFp(configuration).create1(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 创建SchoolInfo。需要ADMIN角色
         * @param {SchoolInfo} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async create2(body: SchoolInfo, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonResultVoid>> {
            return DefaultApiFp(configuration).create2(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 创建。需要ADMIN角色
         * @param {MajorInfo} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async create4(body: MajorInfo, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonResultVoid>> {
            return DefaultApiFp(configuration).create4(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 从Excel文件中创建用户，需要ADMIN角色。其中userFile是User类的excel，roleFile是UserRole类的excel，二者缺一不可，且一一对应，否则账户无法正常使用
         * @param {Blob} userFile 
         * @param {Blob} roleFile 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createFromExcel(userFile: Blob, roleFile: Blob, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonResultVoid>> {
            return DefaultApiFp(configuration).createFromExcel(userFile, roleFile, options).then((request) => request(axios, basePath));
        },
        /**
         * 从excel中创建。需要ADMIN角色
         * @param {Blob} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createFromExcel1(file: Blob, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonResultVoid>> {
            return DefaultApiFp(configuration).createFromExcel1(file, options).then((request) => request(axios, basePath));
        },
        /**
         * 从excel创建。需要ADMIN角色
         * @param {Blob} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createFromExcel2(file: Blob, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonResultVoid>> {
            return DefaultApiFp(configuration).createFromExcel2(file, options).then((request) => request(axios, basePath));
        },
        /**
         * 从excel中创建。需要ADMIN角色
         * @param {Blob} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createFromExcel3(file: Blob, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonResultVoid>> {
            return DefaultApiFp(configuration).createFromExcel3(file, options).then((request) => request(axios, basePath));
        },
        /**
         * 从excel创建。需要ADMIN角色
         * @param {MajorInfoCreateFromExcelBody} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createFromExcel5(body?: MajorInfoCreateFromExcelBody, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonResultVoid>> {
            return DefaultApiFp(configuration).createFromExcel5(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 获取用户详细信息
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async query(options?: AxiosRequestConfig): Promise<AxiosResponse<JsonResultUserVo>> {
            return DefaultApiFp(configuration).query(options).then((request) => request(axios, basePath));
        },
        /**
         * 全查，分页；参数仅需考虑pageNum和pageSize
         * @param {string} [id] id
         * @param {string} [uid] 学工号
         * @param {string} [major] 专业
         * @param {string} [hometown] 生源地
         * @param {string} [entranceScore] 高考成绩
         * @param {string} [score] 前六学期成绩
         * @param {string} [ranking] 前六学期排名
         * @param {string} [university] 去向大学
         * @param {string} [ielts] 雅思成绩
         * @param {string} [toefl] 托福成绩
         * @param {string} [gre] GRE成绩
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async query1(id?: string, uid?: string, major?: string, hometown?: string, entranceScore?: string, score?: string, ranking?: string, university?: string, ielts?: string, toefl?: string, gre?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonResultPageOverseaStuInfo>> {
            return DefaultApiFp(configuration).query1(id, uid, major, hometown, entranceScore, score, ranking, university, ielts, toefl, gre, pageNum, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * schoolId和schoolName至少选择一个查询
         * @param {number} schoolId 
         * @param {string} schoolName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async query2(schoolId: number, schoolName: string, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonResultListSchoolPastRankingVo>> {
            return DefaultApiFp(configuration).query2(schoolId, schoolName, options).then((request) => request(axios, basePath));
        },
        /**
         * 模糊查询，传递name根据name模糊查询，分页；不传递name则为全查，分页。参数仅需考虑name，pageSize，pageNum
         * @param {string} [id] id
         * @param {string} [name] 学校名称
         * @param {string} [rank] 排名
         * @param {string} [icon] 校徽url
         * @param {string} [location] 所在国家
         * @param {string} [introduction] 简介
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async query3(id?: string, name?: string, rank?: string, icon?: string, location?: string, introduction?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonResultPageSchoolInfo>> {
            return DefaultApiFp(configuration).query3(id, name, rank, icon, location, introduction, pageNum, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 根据学校名称查询，分页。参数仅需考虑schoolName，pageNum和pageSize
         * @param {string} [id] id
         * @param {string} [schoolName] 学校名称
         * @param {string} [schoolLink] 学校链接
         * @param {string} [name] 专业名称
         * @param {string} [ranking] 专业排名
         * @param {string} [admissionRequirement] 专业录取要求
         * @param {string} [applicationTime] 专业申请时间
         * @param {string} [courseDetails] 专业课程详情
         * @param {string} [link] 专业官网链接
         * @param {string} [applicationChannel] 专业申请通道
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async query5(id?: string, schoolName?: string, schoolLink?: string, name?: string, ranking?: string, admissionRequirement?: string, applicationTime?: string, courseDetails?: string, link?: string, applicationChannel?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonResultPageMajorInfoVo>> {
            return DefaultApiFp(configuration).query5(id, schoolName, schoolLink, name, ranking, admissionRequirement, applicationTime, courseDetails, link, applicationChannel, pageNum, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 用户注册
         * @param {User} body 
         * @param {number} roleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async register(body: User, roleId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonResultVoid>> {
            return DefaultApiFp(configuration).register(body, roleId, options).then((request) => request(axios, basePath));
        },
        /**
         * 更新，需要传递uid。需要ADMIN角色
         * @param {OverseaStuInfo} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async update(body: OverseaStuInfo, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonResultVoid>> {
            return DefaultApiFp(configuration).update(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 更新，schoolName和schoolId至少传递一个。需要ADMIN角色
         * @param {SchoolPastRankingDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async update1(body: SchoolPastRankingDto, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonResultVoid>> {
            return DefaultApiFp(configuration).update1(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 根据学校名称进行更新，name不能能为空。需要ADMIN角色
         * @param {SchoolInfo} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async update2(body: SchoolInfo, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonResultVoid>> {
            return DefaultApiFp(configuration).update2(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 更新，需要传递id。需要ADMIN角色
         * @param {MajorInfo} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async update4(body: MajorInfo, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonResultVoid>> {
            return DefaultApiFp(configuration).update4(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 精确查询，传递id按id查，传递name按name查
     * @param {number} id 
     * @param {string} name 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public async accurateQuery(id: number, name: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<JsonResultListSchoolInfo>> {
        return DefaultApiFp(this.configuration).accurateQuery(id, name, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 更改密码
     * @param {string} password 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public async changePassword(password: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<JsonResultVoid>> {
        return DefaultApiFp(this.configuration).changePassword(password, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 创建。需要ADMIN角色
     * @param {OverseaStuInfo} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public async create(body: OverseaStuInfo, options?: AxiosRequestConfig) : Promise<AxiosResponse<JsonResultVoid>> {
        return DefaultApiFp(this.configuration).create(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 创建排名，schoolName和schoolId至少转递一个，系统会自动补全。必须传递年份和排名。需要ADMIN角色
     * @param {SchoolPastRankingDto} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public async create1(body: SchoolPastRankingDto, options?: AxiosRequestConfig) : Promise<AxiosResponse<JsonResultVoid>> {
        return DefaultApiFp(this.configuration).create1(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 创建SchoolInfo。需要ADMIN角色
     * @param {SchoolInfo} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public async create2(body: SchoolInfo, options?: AxiosRequestConfig) : Promise<AxiosResponse<JsonResultVoid>> {
        return DefaultApiFp(this.configuration).create2(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 创建。需要ADMIN角色
     * @param {MajorInfo} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public async create4(body: MajorInfo, options?: AxiosRequestConfig) : Promise<AxiosResponse<JsonResultVoid>> {
        return DefaultApiFp(this.configuration).create4(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 从Excel文件中创建用户，需要ADMIN角色。其中userFile是User类的excel，roleFile是UserRole类的excel，二者缺一不可，且一一对应，否则账户无法正常使用
     * @param {Blob} userFile 
     * @param {Blob} roleFile 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public async createFromExcel(userFile: Blob, roleFile: Blob, options?: AxiosRequestConfig) : Promise<AxiosResponse<JsonResultVoid>> {
        return DefaultApiFp(this.configuration).createFromExcel(userFile, roleFile, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 从excel中创建。需要ADMIN角色
     * @param {Blob} file 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public async createFromExcel1(file: Blob, options?: AxiosRequestConfig) : Promise<AxiosResponse<JsonResultVoid>> {
        return DefaultApiFp(this.configuration).createFromExcel1(file, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 从excel创建。需要ADMIN角色
     * @param {Blob} file 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public async createFromExcel2(file: Blob, options?: AxiosRequestConfig) : Promise<AxiosResponse<JsonResultVoid>> {
        return DefaultApiFp(this.configuration).createFromExcel2(file, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 从excel中创建。需要ADMIN角色
     * @param {Blob} file 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public async createFromExcel3(file: Blob, options?: AxiosRequestConfig) : Promise<AxiosResponse<JsonResultVoid>> {
        return DefaultApiFp(this.configuration).createFromExcel3(file, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 从excel创建。需要ADMIN角色
     * @param {MajorInfoCreateFromExcelBody} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public async createFromExcel5(body?: MajorInfoCreateFromExcelBody, options?: AxiosRequestConfig) : Promise<AxiosResponse<JsonResultVoid>> {
        return DefaultApiFp(this.configuration).createFromExcel5(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 获取用户详细信息
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public async query(options?: AxiosRequestConfig) : Promise<AxiosResponse<JsonResultUserVo>> {
        return DefaultApiFp(this.configuration).query(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 全查，分页；参数仅需考虑pageNum和pageSize
     * @param {string} [id] id
     * @param {string} [uid] 学工号
     * @param {string} [major] 专业
     * @param {string} [hometown] 生源地
     * @param {string} [entranceScore] 高考成绩
     * @param {string} [score] 前六学期成绩
     * @param {string} [ranking] 前六学期排名
     * @param {string} [university] 去向大学
     * @param {string} [ielts] 雅思成绩
     * @param {string} [toefl] 托福成绩
     * @param {string} [gre] GRE成绩
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public async query1(id?: string, uid?: string, major?: string, hometown?: string, entranceScore?: string, score?: string, ranking?: string, university?: string, ielts?: string, toefl?: string, gre?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<JsonResultPageOverseaStuInfo>> {
        return DefaultApiFp(this.configuration).query1(id, uid, major, hometown, entranceScore, score, ranking, university, ielts, toefl, gre, pageNum, pageSize, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * schoolId和schoolName至少选择一个查询
     * @param {number} schoolId 
     * @param {string} schoolName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public async query2(schoolId: number, schoolName: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<JsonResultListSchoolPastRankingVo>> {
        return DefaultApiFp(this.configuration).query2(schoolId, schoolName, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 模糊查询，传递name根据name模糊查询，分页；不传递name则为全查，分页。参数仅需考虑name，pageSize，pageNum
     * @param {string} [id] id
     * @param {string} [name] 学校名称
     * @param {string} [rank] 排名
     * @param {string} [icon] 校徽url
     * @param {string} [location] 所在国家
     * @param {string} [introduction] 简介
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public async query3(id?: string, name?: string, rank?: string, icon?: string, location?: string, introduction?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<JsonResultPageSchoolInfo>> {
        return DefaultApiFp(this.configuration).query3(id, name, rank, icon, location, introduction, pageNum, pageSize, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 根据学校名称查询，分页。参数仅需考虑schoolName，pageNum和pageSize
     * @param {string} [id] id
     * @param {string} [schoolName] 学校名称
     * @param {string} [schoolLink] 学校链接
     * @param {string} [name] 专业名称
     * @param {string} [ranking] 专业排名
     * @param {string} [admissionRequirement] 专业录取要求
     * @param {string} [applicationTime] 专业申请时间
     * @param {string} [courseDetails] 专业课程详情
     * @param {string} [link] 专业官网链接
     * @param {string} [applicationChannel] 专业申请通道
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public async query5(id?: string, schoolName?: string, schoolLink?: string, name?: string, ranking?: string, admissionRequirement?: string, applicationTime?: string, courseDetails?: string, link?: string, applicationChannel?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<JsonResultPageMajorInfoVo>> {
        return DefaultApiFp(this.configuration).query5(id, schoolName, schoolLink, name, ranking, admissionRequirement, applicationTime, courseDetails, link, applicationChannel, pageNum, pageSize, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 用户注册
     * @param {User} body 
     * @param {number} roleId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public async register(body: User, roleId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<JsonResultVoid>> {
        return DefaultApiFp(this.configuration).register(body, roleId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 更新，需要传递uid。需要ADMIN角色
     * @param {OverseaStuInfo} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public async update(body: OverseaStuInfo, options?: AxiosRequestConfig) : Promise<AxiosResponse<JsonResultVoid>> {
        return DefaultApiFp(this.configuration).update(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 更新，schoolName和schoolId至少传递一个。需要ADMIN角色
     * @param {SchoolPastRankingDto} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public async update1(body: SchoolPastRankingDto, options?: AxiosRequestConfig) : Promise<AxiosResponse<JsonResultVoid>> {
        return DefaultApiFp(this.configuration).update1(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 根据学校名称进行更新，name不能能为空。需要ADMIN角色
     * @param {SchoolInfo} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public async update2(body: SchoolInfo, options?: AxiosRequestConfig) : Promise<AxiosResponse<JsonResultVoid>> {
        return DefaultApiFp(this.configuration).update2(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 更新，需要传递id。需要ADMIN角色
     * @param {MajorInfo} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public async update4(body: MajorInfo, options?: AxiosRequestConfig) : Promise<AxiosResponse<JsonResultVoid>> {
        return DefaultApiFp(this.configuration).update4(body, options).then((request) => request(this.axios, this.basePath));
    }
}
