/* tslint:disable */
/* eslint-disable */
/**
 * 学工大系统API
 * 学工大系统 Issues Documentation
 *
 * OpenAPI spec version: v1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { JsonResultPageOfferInfo } from '../models';
import { JsonResultVoid } from '../models';
import { OfferInfo } from '../models';
/**
 * OfferApi - axios parameter creator
 * @export
 */
export const OfferApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 创建。需要ADMIN角色
         * @param {OfferInfo} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create3: async (body: OfferInfo, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling create3.');
            }
            const localVarPath = `/oversea/offer/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 从excel创建。需要ADMIN角色
         * @param {Blob} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFromExcel4: async (file: Blob, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'file' is not null or undefined
            if (file === null || file === undefined) {
                throw new RequiredError('file','Required parameter file was null or undefined when calling createFromExcel4.');
            }
            const localVarPath = `/oversea/offer/create_from_excel`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (file !== undefined) {
                localVarQueryParameter['file'] = file;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 全查，分页。参数仅需考虑pageNum和pageSize
         * @param {string} [id] id
         * @param {string} [uid] 用户id
         * @param {string} [offer] offer
         * @param {string} [major] 专业
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        query4: async (id?: string, uid?: string, offer?: string, major?: string, pageNum?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/oversea/offer/query`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }

            if (uid !== undefined) {
                localVarQueryParameter['uid'] = uid;
            }

            if (offer !== undefined) {
                localVarQueryParameter['offer'] = offer;
            }

            if (major !== undefined) {
                localVarQueryParameter['major'] = major;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 更新，需要传递id。需要ADMIN角色
         * @param {OfferInfo} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update3: async (body: OfferInfo, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling update3.');
            }
            const localVarPath = `/oversea/offer/update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OfferApi - functional programming interface
 * @export
 */
export const OfferApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 创建。需要ADMIN角色
         * @param {OfferInfo} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async create3(body: OfferInfo, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<JsonResultVoid>>> {
            const localVarAxiosArgs = await OfferApiAxiosParamCreator(configuration).create3(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 从excel创建。需要ADMIN角色
         * @param {Blob} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createFromExcel4(file: Blob, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<JsonResultVoid>>> {
            const localVarAxiosArgs = await OfferApiAxiosParamCreator(configuration).createFromExcel4(file, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 全查，分页。参数仅需考虑pageNum和pageSize
         * @param {string} [id] id
         * @param {string} [uid] 用户id
         * @param {string} [offer] offer
         * @param {string} [major] 专业
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async query4(id?: string, uid?: string, offer?: string, major?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<JsonResultPageOfferInfo>>> {
            const localVarAxiosArgs = await OfferApiAxiosParamCreator(configuration).query4(id, uid, offer, major, pageNum, pageSize, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 更新，需要传递id。需要ADMIN角色
         * @param {OfferInfo} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async update3(body: OfferInfo, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<JsonResultVoid>>> {
            const localVarAxiosArgs = await OfferApiAxiosParamCreator(configuration).update3(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * OfferApi - factory interface
 * @export
 */
export const OfferApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 创建。需要ADMIN角色
         * @param {OfferInfo} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async create3(body: OfferInfo, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonResultVoid>> {
            return OfferApiFp(configuration).create3(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 从excel创建。需要ADMIN角色
         * @param {Blob} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createFromExcel4(file: Blob, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonResultVoid>> {
            return OfferApiFp(configuration).createFromExcel4(file, options).then((request) => request(axios, basePath));
        },
        /**
         * 全查，分页。参数仅需考虑pageNum和pageSize
         * @param {string} [id] id
         * @param {string} [uid] 用户id
         * @param {string} [offer] offer
         * @param {string} [major] 专业
         * @param {number} [pageNum] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async query4(id?: string, uid?: string, offer?: string, major?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonResultPageOfferInfo>> {
            return OfferApiFp(configuration).query4(id, uid, offer, major, pageNum, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 更新，需要传递id。需要ADMIN角色
         * @param {OfferInfo} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async update3(body: OfferInfo, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonResultVoid>> {
            return OfferApiFp(configuration).update3(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OfferApi - object-oriented interface
 * @export
 * @class OfferApi
 * @extends {BaseAPI}
 */
export class OfferApi extends BaseAPI {
    /**
     * 创建。需要ADMIN角色
     * @param {OfferInfo} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OfferApi
     */
    public async create3(body: OfferInfo, options?: AxiosRequestConfig) : Promise<AxiosResponse<JsonResultVoid>> {
        return OfferApiFp(this.configuration).create3(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 从excel创建。需要ADMIN角色
     * @param {Blob} file 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OfferApi
     */
    public async createFromExcel4(file: Blob, options?: AxiosRequestConfig) : Promise<AxiosResponse<JsonResultVoid>> {
        return OfferApiFp(this.configuration).createFromExcel4(file, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 全查，分页。参数仅需考虑pageNum和pageSize
     * @param {string} [id] id
     * @param {string} [uid] 用户id
     * @param {string} [offer] offer
     * @param {string} [major] 专业
     * @param {number} [pageNum] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OfferApi
     */
    public async query4(id?: string, uid?: string, offer?: string, major?: string, pageNum?: number, pageSize?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<JsonResultPageOfferInfo>> {
        return OfferApiFp(this.configuration).query4(id, uid, offer, major, pageNum, pageSize, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 更新，需要传递id。需要ADMIN角色
     * @param {OfferInfo} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OfferApi
     */
    public async update3(body: OfferInfo, options?: AxiosRequestConfig) : Promise<AxiosResponse<JsonResultVoid>> {
        return OfferApiFp(this.configuration).update3(body, options).then((request) => request(this.axios, this.basePath));
    }
}
